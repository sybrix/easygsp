= Persistence Methods =
Back: [easyom Configuration]

The following methods are added to each object, injectMethods() is invoked on. Each method operates on "this" or the current object.  The methods don't accept any arguments  and all return an Integer indicating the number records affected by the query.

|| public Integer insert() ||  executes an insert statement for the entity for properties that have set since the last persistence method invocation||
|| public Integer  update() ||  executes an update statement for the entity for properties that have set since the last persistence method invocation ||
|| public Integer save() || executes an insert if the primary key(s) has no value, otherwise executes an update query ||
|| public Integer delete() || deletes a this object from the table ||

Example:
{{{
   def insertNewUser(username, lastName, firstName){
     User user = new User(username: username, firstName: firstName, lastName: lastName)
     // insert new user, could have used user.save()
     user.save()

     // now the the user
     user.delete()
  }
}}}

*Static Methods*
|| public static Integer delete() || deletes a row from the table ||
|| static def find() || Returns a single entity ||
|| static def findAll() || Returns a list of entity objects ||
|| static def list() || Returns all of the entity objects in the table(unless paging parameters specified)||


*StringQueries*: The following methods are added to the String class
|| executeQuery || Executes a SELECT query ||
|| executeUpdate || Used to execute insert, update and delete queries  ||
|| executeScalar || Executes a SELECT query and returns a single value (column 1 of the first row)||


==Static Methods - WHERE clause ==

*find()*, *findAll()*, and *delete()* all accept a map with name value pairs that let your specify how the queries WHERE clause is crafted.  You can also only specify one type of logical operator: 'AND' or 'OR'. If no operator is specified, the 'AND' operator is assumed. There is no limit on the number of columns that can be in the WHERE clause.

{{{
    // returns first object in resultset where last name equals 'Smith' and first name equals 'John'
    // find only returns 1 object 
    User user = User.find([lastName:'Smith', firstName:'John'])
    
    //Returns a list of User objects where the last name is 'Smith' or 'Williams'
    List users = User.findAll( operator:'OR', [lastName:'Smith', lastName:'Williams'])

    //Deletes all objects from User table where lastname = 'Harrison'
    User.delete([lastName:'Harrison'])
    
}}}


==Static Methods - ORDER BY clause ==
To specify the where order by clause for *findAll()* or *list()*, simple add an 'orderBy'
to the parameters map with a comma seperator list of column/property names.

{{{
    //Returns a list of User objects where state = 'FL' ordered By, the state column, then the lastName column in ascending order
    List users = User.findAll( operator:'OR', [state:'FL', orderBy:'state, lastName'])

    //Returns a list of User objects where state = 'FL' ordered By, the state column in ascending order, folloed by lastName column in descending order
    List users = User.findAll( operator:'OR', [state:'FL', orderBy:'state, lastName DESC'])   
}}}

==Static Methods - Paging ==
To specify paging options for findAll or list(), include a page and pageSize keys with values, to the parameters map.  The returned object will be a Map.  The map will contain the following:


Paged Result Map
|| *Key* || *Value* || 
|| recordCount || the total number of records in the DB for the specified query ||
|| page || The current page of the result set ||
|| pageCount || The total number of pages in the query results || 
|| results || A list of GroovyRowResult objects, or a list of the specified return type ||


== StringQueries ==
String queries allow you to do call an "execute" query method on a simple String. 

{{{
    // returns the total number of records in table tblUser
    def getTotalRecordCount(){
       "SELECT count(*) FROM tblUser".executeScalar()
    }
}}}

StringQueries can be executed with queries parameters, paging options and/or the object return type.  [stringQueries See all of the options here].