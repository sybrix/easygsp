#summary Scope

= Scope =

There are 4 primary scopes in EasyGSP:  Flash, Request, Session and Application.  If your backgroup is java web development each of these work as you would expect.

== Flash ==

Variables set in flash scope have a life span of the request in which they are set, and one subsequent request.  This is useful for simple notifications and alerts, that need to exists even after a redirect request.

Flash scope can be accessed from any controller script or gsp/gspx template.  Its syntax for getting/setting values is the same as that of a java.util.Map.

*Flash scope requires an active session.*

Setting a flash scope variable
{{{
      flash.success = 'Your account was successfully created'
      flash['success message'] = 'This syntax works too'
      flash.put('anotherSuccessMessage', 'Even this works')

      redirect 'index.gspx'
}}}

*When a flash variable does not exist, the flash object returns an empty string a the value.* 

Using a flash variable
{{{
  <div class="successMessage">${flash.success}</div>
}}}

The above variables will be available for the next request by the current user but will be not be available for any request after that.


Request, Session and Application(ServletContext) scope in EasyGSP works exactly as it does in any servlet api implementation. EasyGSP actually implements the servlet api with regard to the the HttpServletRequest, HttpSession and ServletContext.  Accessing these scopes can be done using the familiar java syntax or the groovier shorthand syntax.

The servlet context can be accessed as app or application.
{{{
   // Access application scope variables
   // ok
   app.setAttribute("smptHost","localhost")
   
   // groovy
   app["smptHost"] = "localhost"
   
   // groovier
   app.smtpHost = 'localhost'


   // Accessing session 
   session.setAttribute("userName","me")
   session['userName'] = 'me'
   session.userName = 'me'

   // Accessing request 
   request.setAttribute("currentPage",1)
   request['currentPage'] = 1
   request.currentPage = 1

}}}
