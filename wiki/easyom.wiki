#summary EasyOM - Easy Object Mapping

I'm still working on this......

= About =
EasyOM and not EasyORM because it's not an ORM.  This class allows you to persist single objects to the database by adding persistence methods to entity classes.  It also adds methods that allow you to execute "StringQueries".  


= Configuration =

Use the following 2 methods to configure EasyOM.

==== public static void init(java.lang.Properties propFile) ====  
  Initializes the internal properties and datbase properties used for database operations

==== public static void injectMethods(java.lang.Class clazz) ====
  Adds methods to the specified class for persistence and querying.

To initialize EasyOM and to add the persistence methods to an application's entity classes, invoke the methods like so:

{{{
   // or some other type of bootstrap method
   def onApplicationStart(app){
       EasyOM.init(loadPropertiesFile("db.properties"))

       EasyOM.injectMethods(model.EntityObject1.class)
       EasyOM.injectMethods(model.EntityObject2.class)
       EasyOM.injectMethods(model.EntityObject3.class)
   }
}}}

The properties file expected by EasyOM.init() must have the follow name value pairs
|| *Property*|| *Description*||
||db.driver || The database driver name||
||db.url || Database connection url ||
||db.username || Database username||
||db.password || Database password ||
||use.table.prefix|| when 'true', a specified prefix will be prefixed to the entity name.  ie, if the entity name is "User", but the table name is "tblUser" set this property to true and set table.prefix ||
||table.prefix|| The table prefix. Use with "use.table.prefix" ||
||camel.case.table.name|| set true when underscores in table name should be converted to camel cased entity name||
||camel.case.column.name|| set true when underscores in column names should be converted to camel cased column name ||

= Persistence Methods =
The following methods are added to each object, injectMethods() is invoked on:
|| insert() ||  executes an insert statement for the entity for properties that have set since the last persistence method invocation||
|| update() ||  executes an update statement for the entity for properties that have set since the last persistence method invocation ||
|| delete() || deletes a row from the table ||
|| save() || executes an insert if the primary key(s) has no value, otherwise executes an update query ||
|| find() || Returns a single entity ||
|| findAll() || Returns a list of entity objects ||
|| list() || Returns all of the entity objects in the table(unless paging parameters specified)||


*StringQueries*: The following methods are added to the String class
|| executeQuery || Executes a SELECT query ||
|| executeUpdate || Used to execute insert, update and delete queries  ||
|| executeScalar || Executes a SELECT query and returns a single value (column 1 of the first row)||

= Methods Explained =

insert(), update(), delete() and save() accept no arguments and returns an Integer to indicates the number of records updated.  Any of these methods can be call on an instantiated entity object.

Example:
{{{
   def insertNewUser(username, lastName, firstName){
     User user = new User(username: username, firstName: firstName, lastName: lastName)
     user.insert()
  }
}}}

==Static Methods==

Each entity object has a static delete() method. Simply specify the values for the primary key(s) in a map to delete.

{{{
        public void testStaticDelete() {
                assertTrue User.delete([username: 'dsmith']) > 0
        }
}}}

==== delete() ====
==== list() ====
==== find() ====
==== findAll() ====

|| recordCount || the total number of records in the DB for the specified query ||
|| page || The current page of the result set ||
|| pageCount || The total number of pages in the query results || 
|| results || A list of GroovyRowResult objects, or a list of the specified return type ||


== StringQueries ==
String queries allow you to do call an "execute" query method on a simple String. 

{{{
    // returns the total number of records in table tblUser
    def getTotalRecordCount(){
       "SELECT count(*) FROM tblUser".executeScalar()
    }
}}}

StringQueries can be executed with queries parameters, paging options and/or the object return type.  [stringQueries See all of the options here].