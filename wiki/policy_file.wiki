#summary Security

= Security =

The EasyGSP server process has been designed with hosting in mind.  Sharing a JVM among many users requires that each shared application is isolated within its own sandbox.  It would be a problem if application1 could access the files of application2.  It would also be a problem if application1 could run System.exit() to bring down the entire server.  EasyGSP uses a custom security manager and custom classloaders to deal with these and other security concerns.

== File Access == 
EasyGSP determines where an application lives on the file system via headers send from the HTTP server.  The first phase in processing a request, is to determine with application the request is from.  Once this is determined, all activity via "this" request is isolated to the application's folder on the file system.  An application cannot access any content outside of its own directory.  The security manager prevents this.  While each application can read and write as much as it likes within it's own directory and subdirectories no request associated with an application can access a folder or file outside of its own directory.  Best practices suggest that EasyGSP should be run under its own operating system account and that account will need access to the all of the directories and files for which is will be processing requests.  While the EasyGSP user and OS process will have access to everything granted at the OS level, the JVM will control what each application can access.  Most of this is controlled via the easygsp.policy file, but some of the rules are coded in the custom security manager.