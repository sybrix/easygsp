#summary StringQueries

=== def executeQuery(Object[] parameters) ===
  Executes a SELECT query and returns a list or GroovyResultRow a specified object type.

When no parameters result type is specified, a list of GroovyResultRow objects is returned.  Then GroovyResultRow behave very much like a bean:
{{{

    def users = "SELECT username, first_name firstName, last_name lastName FROM tblUser".executeQuery()
    users.each {user ->
       console "username: $user.username, real name:  $user.lastName, $user.firstName"
    }

}}}






        public void testStringExecuteQueryWithPaging() {

                for (i in 0..5) {
                        TestTable tbl = new TestTable()
                        tbl.smallIntColumn = 300 + 1
                        tbl.dateColumn = new Date()
                        tbl.testMapColumn = "working"
                        tbl.insert()
                }

                def pagedResults = "SELECT small_Int_Column smallIntColumn FROM tblTestTable ORDER BY small_Int_Column".executeQuery([page: 2, pageSize: 2])

                assertTrue(pagedResults.recordCount > 0)
                assertTrue(pagedResults.page == 2)
                assertTrue(pagedResults.pageCount > 0)
                assertTrue(pagedResults.results.size() > 0)

        }

        public void testStringExecuteQueryWithPagingWithResultClass() {

                for (i in 0..5) {
                        TestTable tbl = new TestTable()
                        tbl.smallIntColumn = 300 + 1
                        tbl.dateColumn = new Date()
                        tbl.testMapColumn = "working"
                        tbl.insert()
                }

                def params = [254]
                def pagedResults = "SELECT small_Int_Column smallIntColumn FROM tblTestTable ORDER BY small_Int_Column".executeQuery([page: 2, pageSize: 2, resultClass: TestTable.class])

                assertTrue(pagedResults.recordCount > 0)
                assertTrue(pagedResults.page == 2)
                assertTrue(pagedResults.pageCount > 0)
                assertTrue(pagedResults.results.size() > 0)
                assertTrue(pagedResults.results[0] instanceof TestTable)
        }

        public void testStringExecuteQueryWithPagingWithResultClassAndParameters() {

                for (i in 0..5) {
                        TestTable tbl = new TestTable()
                        tbl.smallIntColumn = 500 + 1
                        tbl.dateColumn = new Date()
                        tbl.testMapColumn = "working"
                        tbl.insert()
                }

                def params = [500]
                def pagedResults = "SELECT small_Int_Column smallIntColumn FROM tblTestTable WHERE small_Int_Column > ? ORDER BY small_Int_Column".executeQuery([page: 2, pageSize: 2, resultClass: TestTable.class, parameters: params])

                assertTrue("record count incorrect", pagedResults.recordCount > 0)
                assertTrue("page number incorrect", pagedResults.page == 2)
                assertTrue("page count incorrect", pagedResults.pageCount == 3)
                assertTrue("result set size incorrect", pagedResults.results.size() == 2)
                assertTrue("result is not correct type", pagedResults.results[0] instanceof TestTable)
                assertTrue("resultClass returned incorect value", pagedResults.results[0].smallIntColumn > 500)
        }

        public void testStringExecuteWithParameters() {
                insertRecord()

                def r = "SELECT small_Int_Column smallIntColumn FROM tblTestTable where small_int_column = ?".executeQuery(254)

                assertEquals(r[0].smallIntColumn, 254)
        }
}}}