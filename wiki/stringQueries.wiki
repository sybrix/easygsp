#summary StringQueries

=== def executeQuery(Object`[]` parameters) ===
Executes a SELECT query and returns a list or GroovyResultRow a specified object type.

When no parameters result type is specified, a list of GroovyResultRow objects is returned.  Then GroovyResultRow behaves very much like a bean:
{{{

    def users = "SELECT username, first_name firstName, last_name lastName FROM tblUser".executeQuery()
    users.each {user ->
       console "username: $user.username, real name:  $user.lastName, $user.firstName"
    }

}}}


executeQuery() with return type specified. Returns a list of User objects
{{{

    def users = "SELECT username, first_name firstName, last_name lastName FROM tblUser".executeQuery(User.class)
    users.each {user ->
       console "username: $user.username, real name:  $user.lastName, $user.firstName"
    }

}}}


executeQuery() with parameter. One or parameters can be specified as arguments for executeQuery().

{{{
    String lastName = 'Smith'
    def users

    users = "SELECT username, first_name firstName, last_name lastName FROM tblUser WHERE last_name= ?".executeQuery(lastNameParameter)  
    // equivalent to above
    users = "SELECT username, first_name firstName, last_name lastName FROM tblUser WHERE last_name= $lastNameParameter".executeQuery()

    users.each {user ->
       console "username: $user.username, real name:  $user.lastName, $user.firstName"
    }

}}}

executeQuery() with parameter and result type.  When both are specified, result type should be the first argument list, followed by the parameter values.

{{{
    String lastName = 'Smith'
    def users

    users = "SELECT username, first_name firstName, last_name lastName FROM tblUser WHERE last_name= ?".executeQuery(User.class, lastNameParameter)  

}}}