#summary StringQueries

=== def executeQuery(Object`[]` parameters) ===
Executes a SELECT query and returns a list or GroovyResultRow a specified object type.

When no parameters result type is specified, a list of GroovyResultRow objects is returned.  Then GroovyResultRow behaves very much like a bean:
{{{

    def users = "SELECT username, first_name firstName, last_name lastName FROM tblUser".executeQuery()
    users.each {user ->
       console "username: $user.username, real name:  $user.lastName, $user.firstName"
    }

}}}


executeQuery() with return type specified. Returns a list of User objects
{{{

    def users = "SELECT username, first_name firstName, last_name lastName FROM tblUser".executeQuery(User.class)
    users.each {user ->
       console "username: $user.username, real name:  $user.lastName, $user.firstName"
    }

}}}


executeQuery() with parameter. One or parameters can be specified as arguments for executeQuery().

{{{
    String lastName = 'Smith'
    def users

    users = "SELECT username, first_name firstName, last_name lastName FROM tblUser WHERE last_name= ?".executeQuery(lastNameParameter)  
    // equivalent to above
    users = "SELECT username, first_name firstName, last_name lastName FROM tblUser WHERE last_name= $lastNameParameter".executeQuery()

    users.each {user ->
       console "username: $user.username, real name:  $user.lastName, $user.firstName"
    }

}}}

executeQuery() with parameter and result type.  When both are specified, result type should be the first argument, followed by the parameter values.

{{{
    String lastName = 'Smith'
    def users = "SELECT username, first_name firstName, last_name lastName FROM tblUser WHERE last_name= ?".executeQuery(User.class, lastNameParameter)  

}}}

== Paging ==

executeQuery() with paging. To specify paging, the parameter list must be a map, with the following attributes.
Parameter Map:
|| page || The page being requested. Required. ||
|| pageSize || The number of records per page. Required.|| 
|| resultClass || The type of object in the results list. Optional.||
|| parameters || A list of the query parameter values. Optional. ||

When paging is specified, the return object is a map.  The map contains 4 attributes w/values:  

Return Object
|| recordCount || the total number of records in the DB for the specified query ||
|| page || The current page of the result set ||
|| pageCount || The total number of pages in the query results || 
|| results || A list of GroovyRowResult objects, or a list of the specified return type ||


{{{
    def pagedResults = "SELECT username, first_name firstName, last_name lastName FROM tblUser ORDER BY last_name".executeQuery([page: 2, pageSize: 10])

    assertTrue(pagedResults.recordCount > 0)
    assertTrue(pagedResults.page == 2)
    assertTrue(pagedResults.pageCount > 0)
    assertTrue(pagedResults.results.size() > 0)
}}}

Another example with paging and result type specified.
{{{
    def pagedResults = "SELECT username, first_name firstName, last_name lastName FROM tblUser ORDER BY last_name ".executeQuery([page: 2, pageSize: 10, resultClass: User.class])

}}}

Another example with paging, result type specified and query parameter values
{{{
    def params = ['Smith']
    def pagedResults = "SELECT username, first_name firstName, last_name lastName FROM tblUser WHERE last_name = ?".executeQuery([page: 2, pageSize: 10, resultClass: User.class, parameters: params])

}}}